(function() {
  var Akismet, domain, http, qs, util;

  http = require('http');

  qs = require('querystring');

  util = require('util');

  domain = require('domain');

  Akismet = (function() {

    function Akismet(options) {
      this.blog = options.blog || '';
      this.apiKey = options.apiKey;
      this.host = options.host || 'rest.akismet.com';
      this.endPoint = options.endPoint || this.apiKey + '.' + this.host;
      this.port = options.port || 80;
      this.userAgent = options.userAgent || 'Generic Node.js/1.0.0 | Akismet 2.4.0';
      this.charset = options.charset || 'utf-8';
    }

    Akismet.prototype.verifyKey = function(callback) {
      callback || (callback = function() {});
      return this.postRequest(this.host, '/1.1/verify-key', {
        key: this.apiKey,
        blog: this.blog
      }, function(err, status, headers, body) {
        return callback(err, (status >= 200 && status < 300 && body === 'valid' ? true : false));
      });
    };

    Akismet.prototype.checkSpam = function(options, callback) {
      callback || (callback = function() {});
      options.blog = this.blog;
      options.user_agent = this.userAgent;
      return this.postRequest(this.endPoint, '/1.1/comment-check', options, function(err, status, headers, body) {
        return callback(err, (status >= 200 && status < 300 && body === 'true' ? true : false));
      });
    };

    Akismet.prototype.submitSpam = function(options, callback) {
      callback || (callback = function() {});
      options.blog = this.blog;
      options.user_agent = this.userAgent;
      return this.postRequest(this.endPoint, '/1.1/submit-spam', options, function(err, status, headers, body) {
        return callback(err);
      });
    };

    Akismet.prototype.submitHam = function(options, callback) {
      callback || (callback = function() {});
      options.blog = this.blog;
      options.user_agent = this.userAgent;
      return this.postRequest(this.endPoint, '/1.1/submit-ham', options, function(err, status, headers, body) {
        return callback(err);
      });
    };

    Akismet.prototype.postRequest = function(hostname, path, query, callback) {
      var dom, options;
      query = qs.stringify(query);
      options = {
        'method': 'POST',
        'hostname': hostname,
        'path': path,
        'port': this.port,
        'headers': {
          'content-type': 'application/x-www-form-urlencoded; charset=' + this.charset,
          'content-length': Buffer.byteLength(query),
          'user-agent': this.userAgent
        }
      };
      dom = domain.create();
      dom.on('error', function(err) {
        return callback(err);
      });
      return dom.run(function() {
        var req;
        req = http.request(options, function(res) {
          res.setEncoding('utf8');
          return res.on('data', function(body) {
            return callback(null, res.statusCode, res.headers, body);
          });
        });
        req.write(query);
        return req.end();
      });
    };

    return Akismet;

  })();

  module.exports = {
    client: function(options) {
      return new Akismet(options);
    }
  };

}).call(this);
